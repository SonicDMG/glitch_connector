{"version":3,"sources":["../cassandra.js"],"names":["client","Client","contactPoints","process","localDataCenter","DATACENTER_NAME","console","Object","module","video","result","resolve"],"mappings":";;AAAA,IAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA,C,CAEA;;;AACA,IAAMA,MAAM,GAAG,IAAIC,gBAAAA,CAAJ,MAAA,CACb;AACEC,EAAAA,aAAa,EAAE,CAACC,OAAO,CAAPA,GAAAA,CADlB,cACiB,CADjB;AAEEC,EAAAA,eAAe,EAAED,OAAO,CAAPA,GAAAA,CAAYE;AAAe;;;AAF9C,CADa,CAAf;AAQAL,MAAM,CAANA,OAAAA,GAAAA,IAAAA,CACQ,YAAY;AAChBM,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,0CAAAA,EAAwDN,MAAM,CAANA,KAAAA,CAAxDM,MAAAA,EAA6EN,MAAM,CAANA,KAAAA,CAA7EM,IAA6EN,EAA7EM;AACAA,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,eAAAA,EAA6BC,MAAM,CAANA,IAAAA,CAAYP,MAAM,CAANA,QAAAA,CAAzCM,SAA6BC,CAA7BD;AAHJN,CAAAA,EAAAA,OAAAA,EAKS,UAAA,GAAA,EAAe;AACpBM,EAAAA,OAAO,CAAPA,KAAAA,CAAAA,oCAAAA,EAAAA,GAAAA;AACA,SAAO,MAAM,CAAN,QAAA,GAAA,IAAA,CAAuB,YAAM;AAAE,UAAA,GAAA;AAAtC,GAAO,CAAP;AAPJN,CAAAA;;AAWAQ,MAAM,CAANA,OAAAA,CAAAA,YAAAA,GAA8B,UAAA,IAAA,EAAA,QAAA,EAA0B;AACtD,SAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAA0B;AAC3C,WAAO,MAAM,CAAN,OAAA,CAAA,yCAAA,EAAA,IAAA,CACC,UAAA,MAAA,EAAU;AACd,UAAIC,KAAK,GAAGC,MAAM,CAAlB,KAAYA,EAAZ;AACAC,MAAAA,OAAO,CAAPA,KAAO,CAAPA;AAHJ,KAAO,CAAP;AADF,GAAO,CAAP;AADFH,CAAAA;AAUA","sourcesContent":["import { Client, types as CassandraTypes } from 'cassandra-driver';\n\n// Provide rudimentary connection to DSE cluster\nconst client = new Client(\n  { \n    contactPoints: [process.env.CONTACT_POINTS], \n    localDataCenter: process.env.DATACENTER_NAME/**,\n    queryOptions: { consistency: types.consistencies.quorum }*/\n  }\n);\n\nclient.connect()\n  .then(function () {\n    console.log('Connected to cluster with %d host(s): %j', client.hosts.length, client.hosts.keys());\n    console.log('Keyspaces: %j', Object.keys(client.metadata.keyspaces));\n  })\n  .catch(function (err) {\n    console.error('There was an error when connecting', err);\n    return client.shutdown().then(() => { throw err; });\n  });\n\n\nmodule.exports.performQuery = function (call, callback) { \n  return new Promise(function(resolve, reject) {\n    return client.execute(\"select * from killrvideo.videos limit 1\")\n      .then(result => {\n        let video = result.first();\n        resolve(video);\n      });\n  });\n};\n\n/**module.exports = {\n  performQuery: performQuery\n}*/"],"file":"cassandra.js"}