{"version":3,"sources":["../cassandra.js"],"names":["client","Client","contactPoints","process","env","CONTACT_POINTS","localDataCenter","DATACENTER_NAME","queryOptions","consistency","types","consistencies","quorum","connect","then","console","log","hosts","length","keys","Object","metadata","keyspaces","err","error","shutdown","module","exports","performQuery","call","callback","Promise","resolve","reject","execute","result","video","first"],"mappings":";;AACA;;AADA;AAGA;AACA,IAAMA,MAAM,GAAG,IAAIC,uBAAJ,CACb;AACEC,EAAAA,aAAa,EAAE,CAACC,OAAO,CAACC,GAAR,CAAYC,cAAb,CADjB;AAEEC,EAAAA,eAAe,EAAEH,OAAO,CAACC,GAAR,CAAYG,eAF/B;AAGEC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,WAAW,EAAEC,KAAK,CAACC,aAAN,CAAoBC;AAAnC;AAHhB,CADa,CAAf;AAQAZ,MAAM,CAACa,OAAP,GACGC,IADH,CACQ,YAAY;AAChBC,EAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwDhB,MAAM,CAACiB,KAAP,CAAaC,MAArE,EAA6ElB,MAAM,CAACiB,KAAP,CAAaE,IAAb,EAA7E;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BI,MAAM,CAACD,IAAP,CAAYnB,MAAM,CAACqB,QAAP,CAAgBC,SAA5B,CAA7B;AACD,CAJH,WAKS,UAAUC,GAAV,EAAe;AACpBR,EAAAA,OAAO,CAACS,KAAR,CAAc,oCAAd,EAAoDD,GAApD;AACA,SAAOvB,MAAM,CAACyB,QAAP,GAAkBX,IAAlB,CAAuB,YAAM;AAAE,UAAMS,GAAN;AAAY,GAA3C,CAAP;AACD,CARH;;AAWAG,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8B,UAAUC,IAAV,EAAgBC,QAAhB,EAA0B;AACtD,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,WAAOjC,MAAM,CAACkC,OAAP,CAAe,yCAAf,EACJpB,IADI,CACC,UAAAqB,MAAM,EAAI;AACd,UAAIC,KAAK,GAAGD,MAAM,CAACE,KAAP,EAAZ;AACAL,MAAAA,OAAO,CAACI,KAAD,CAAP;AACD,KAJI,CAAP;AAKD,GANM,CAAP;AAOD,CARD;AAUA","sourcesContent":["//const cassandra = require('cassandra-driver');\nimport { Client, types as CassandraTypes } from 'cassandra-driver';\n\n// Provide rudimentary connection to DSE cluster\nconst client = new Client(\n  { \n    contactPoints: [process.env.CONTACT_POINTS], \n    localDataCenter: process.env.DATACENTER_NAME,\n    queryOptions: { consistency: types.consistencies.quorum }\n  }\n);\n\nclient.connect()\n  .then(function () {\n    console.log('Connected to cluster with %d host(s): %j', client.hosts.length, client.hosts.keys());\n    console.log('Keyspaces: %j', Object.keys(client.metadata.keyspaces));\n  })\n  .catch(function (err) {\n    console.error('There was an error when connecting', err);\n    return client.shutdown().then(() => { throw err; });\n  });\n\n\nmodule.exports.performQuery = function (call, callback) { \n  return new Promise(function(resolve, reject) {\n    return client.execute(\"select * from killrvideo.videos limit 1\")\n      .then(result => {\n        let video = result.first();\n        resolve(video);\n      });\n  });\n};\n\n/**module.exports = {\n  performQuery: performQuery\n}*/"],"file":"cassandra.js"}